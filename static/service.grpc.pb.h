// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto
// Original file comments:
//
//  Authors
//    github.com/luncliff (luncliff@gmail.com)
//
//  See Also
//    https://developers.google.com/protocol-buffers/docs/proto3
//    scripts/run_protoc.sh
//
#ifndef GRPC_service_2eproto__INCLUDED
#define GRPC_service_2eproto__INCLUDED

#include "service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace scheduler {

class Scheduler1 final {
 public:
  static constexpr char const* service_full_name() {
    return "scheduler.Scheduler1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Once(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::scheduler::Response1* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scheduler::Response1>> AsyncOnce(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scheduler::Response1>>(AsyncOnceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scheduler::Response1>> PrepareAsyncOnce(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::scheduler::Response1>>(PrepareAsyncOnceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::scheduler::Response1>> Stream(::grpc::ClientContext* context, const ::scheduler::Request1& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::scheduler::Response1>>(StreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::scheduler::Response1>> AsyncStream(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::scheduler::Response1>>(AsyncStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::scheduler::Response1>> PrepareAsyncStream(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::scheduler::Response1>>(PrepareAsyncStreamRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Once(::grpc::ClientContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Once(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::scheduler::Response1* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Once(::grpc::ClientContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Once(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::scheduler::Response1* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Stream(::grpc::ClientContext* context, ::scheduler::Request1* request, ::grpc::experimental::ClientReadReactor< ::scheduler::Response1>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scheduler::Response1>* AsyncOnceRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::scheduler::Response1>* PrepareAsyncOnceRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::scheduler::Response1>* StreamRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::scheduler::Response1>* AsyncStreamRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::scheduler::Response1>* PrepareAsyncStreamRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Once(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::scheduler::Response1* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scheduler::Response1>> AsyncOnce(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scheduler::Response1>>(AsyncOnceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scheduler::Response1>> PrepareAsyncOnce(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::scheduler::Response1>>(PrepareAsyncOnceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::scheduler::Response1>> Stream(::grpc::ClientContext* context, const ::scheduler::Request1& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::scheduler::Response1>>(StreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::scheduler::Response1>> AsyncStream(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::scheduler::Response1>>(AsyncStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::scheduler::Response1>> PrepareAsyncStream(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::scheduler::Response1>>(PrepareAsyncStreamRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Once(::grpc::ClientContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response, std::function<void(::grpc::Status)>) override;
      void Once(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::scheduler::Response1* response, std::function<void(::grpc::Status)>) override;
      void Once(::grpc::ClientContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Once(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::scheduler::Response1* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Stream(::grpc::ClientContext* context, ::scheduler::Request1* request, ::grpc::experimental::ClientReadReactor< ::scheduler::Response1>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::scheduler::Response1>* AsyncOnceRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::scheduler::Response1>* PrepareAsyncOnceRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::scheduler::Response1>* StreamRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request) override;
    ::grpc::ClientAsyncReader< ::scheduler::Response1>* AsyncStreamRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::scheduler::Response1>* PrepareAsyncStreamRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Once_;
    const ::grpc::internal::RpcMethod rpcmethod_Stream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Once(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response);
    virtual ::grpc::Status Stream(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::grpc::ServerWriter< ::scheduler::Response1>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Once : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Once() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Once() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Once(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnce(::grpc::ServerContext* context, ::scheduler::Request1* request, ::grpc::ServerAsyncResponseWriter< ::scheduler::Response1>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Stream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::grpc::ServerWriter< ::scheduler::Response1>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStream(::grpc::ServerContext* context, ::scheduler::Request1* request, ::grpc::ServerAsyncWriter< ::scheduler::Response1>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Once<WithAsyncMethod_Stream<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Once : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Once() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::scheduler::Request1, ::scheduler::Response1>(
          [this](::grpc::ServerContext* context,
                 const ::scheduler::Request1* request,
                 ::scheduler::Response1* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Once(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Once(
        ::grpc::experimental::MessageAllocator< ::scheduler::Request1, ::scheduler::Response1>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::scheduler::Request1, ::scheduler::Response1>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Once() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Once(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Once(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Stream() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::scheduler::Request1, ::scheduler::Response1>(
          [this] { return this->Stream(); }));
    }
    ~ExperimentalWithCallbackMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::grpc::ServerWriter< ::scheduler::Response1>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::scheduler::Request1, ::scheduler::Response1>* Stream() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::scheduler::Request1, ::scheduler::Response1>;}
  };
  typedef ExperimentalWithCallbackMethod_Once<ExperimentalWithCallbackMethod_Stream<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Once : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Once() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Once() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Once(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Stream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::grpc::ServerWriter< ::scheduler::Response1>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Once : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Once() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Once() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Once(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnce(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Stream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::grpc::ServerWriter< ::scheduler::Response1>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Once : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Once() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Once(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Once() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Once(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Once(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Stream() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Stream(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::grpc::ServerWriter< ::scheduler::Response1>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Stream() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Once : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Once() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::scheduler::Request1, ::scheduler::Response1>(std::bind(&WithStreamedUnaryMethod_Once<BaseClass>::StreamedOnce, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Once() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Once(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnce(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::scheduler::Request1,::scheduler::Response1>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Once<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Stream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::scheduler::Request1, ::scheduler::Response1>(std::bind(&WithSplitStreamingMethod_Stream<BaseClass>::StreamedStream, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stream(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::grpc::ServerWriter< ::scheduler::Response1>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::scheduler::Request1,::scheduler::Response1>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Stream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Once<WithSplitStreamingMethod_Stream<Service > > StreamedService;
};

}  // namespace scheduler


#endif  // GRPC_service_2eproto__INCLUDED
