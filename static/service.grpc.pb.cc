// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace scheduler {

static const char* Scheduler1_method_names[] = {
  "/scheduler.Scheduler1/Once",
  "/scheduler.Scheduler1/Stream",
};

std::unique_ptr< Scheduler1::Stub> Scheduler1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Scheduler1::Stub> stub(new Scheduler1::Stub(channel));
  return stub;
}

Scheduler1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Once_(Scheduler1_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stream_(Scheduler1_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Scheduler1::Stub::Once(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::scheduler::Response1* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Once_, context, request, response);
}

void Scheduler1::Stub::experimental_async::Once(::grpc::ClientContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Once_, context, request, response, std::move(f));
}

void Scheduler1::Stub::experimental_async::Once(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::scheduler::Response1* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Once_, context, request, response, std::move(f));
}

void Scheduler1::Stub::experimental_async::Once(::grpc::ClientContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Once_, context, request, response, reactor);
}

void Scheduler1::Stub::experimental_async::Once(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::scheduler::Response1* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Once_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::scheduler::Response1>* Scheduler1::Stub::AsyncOnceRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::scheduler::Response1>::Create(channel_.get(), cq, rpcmethod_Once_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::scheduler::Response1>* Scheduler1::Stub::PrepareAsyncOnceRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::scheduler::Response1>::Create(channel_.get(), cq, rpcmethod_Once_, context, request, false);
}

::grpc::ClientReader< ::scheduler::Response1>* Scheduler1::Stub::StreamRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::scheduler::Response1>::Create(channel_.get(), rpcmethod_Stream_, context, request);
}

void Scheduler1::Stub::experimental_async::Stream(::grpc::ClientContext* context, ::scheduler::Request1* request, ::grpc::experimental::ClientReadReactor< ::scheduler::Response1>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::scheduler::Response1>::Create(stub_->channel_.get(), stub_->rpcmethod_Stream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::scheduler::Response1>* Scheduler1::Stub::AsyncStreamRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::scheduler::Response1>::Create(channel_.get(), cq, rpcmethod_Stream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::scheduler::Response1>* Scheduler1::Stub::PrepareAsyncStreamRaw(::grpc::ClientContext* context, const ::scheduler::Request1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::scheduler::Response1>::Create(channel_.get(), cq, rpcmethod_Stream_, context, request, false, nullptr);
}

Scheduler1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scheduler1_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Scheduler1::Service, ::scheduler::Request1, ::scheduler::Response1>(
          std::mem_fn(&Scheduler1::Service::Once), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Scheduler1_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Scheduler1::Service, ::scheduler::Request1, ::scheduler::Response1>(
          std::mem_fn(&Scheduler1::Service::Stream), this)));
}

Scheduler1::Service::~Service() {
}

::grpc::Status Scheduler1::Service::Once(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::scheduler::Response1* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Scheduler1::Service::Stream(::grpc::ServerContext* context, const ::scheduler::Request1* request, ::grpc::ServerWriter< ::scheduler::Response1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace scheduler

